<?php

namespace app\modules\admin\models;

use Yii;
use yii\base\Model;
use app\models\Features as ParentsModel;

/**
 * This is the model class for table "tbl_features".
 *
 * @property string $id
 * @property string $name
 * @property integer $type
 * @property integer $filter_status
 * @property string $main_features
 *
 */
class Features extends ParentsModel
{

    public static $FILTER_STATUS = [
        'yes' => 1,
        'no' => 0
    ];

    public static $SCENARIO = [
        'main' => 'main',
        'under' => 'under',
    ];


    public static $TYPE = [
        'regular' => 1,
        'number' => 2,
        'massive' => 3,
    ];


    private $formName;

    public function rules()
    {
        return [
            [['id', 'name', 'filter_status'], 'required'],
            [['type', 'filter_status'], 'integer'],
            [['main_features'],'required','message'=>'Выберите особенность','on'=>self::$SCENARIO['under']],
            [['id', 'name', 'main_features'], 'string', 'max' => 100],
            [['id'], 'unique','message' => 'Название ID должно быть уникальным'],
        ];
    }

    public function scenarios()
    {
        return [
            self::$SCENARIO['main'] => ['id','name','filter_status','type','main_features'],
            self::$SCENARIO['under'] => ['id','name','filter_status','type','main_features'],
        ];
    }


    public function afterFind()
    {
        $this->trigger(self::EVENT_AFTER_FIND);
    }


    public function getListMainFeatures(){
        $list = self::find()
            ->select(['id','name'])
            ->where(['main_features'=>null,'type'=>self::$TYPE['massive']])
            ->asArray(true)
            ->orderBy(['name' => SORT_ASC])
            ->all();
        return $list;
    }


    public function getLabelFilterStatus(){

        $label = [
            0 => 'Нет',
            1 => 'Да',
        ];

        return $label[$this->filter_status];
    }

    public function getLabelType(){

        $label = [
            1 => 'Обычный',
            2 => 'Цифровой',
            3 => 'Множество',
        ];

        return $label[$this->type];
    }

    public function setFormName($name){
        $this->formName = $name;

    }

    public function formName()
    {
        if(!$this->formName){
            return parent::formName(); // TODO: Change the autogenerated stub
        }else{
            return $this->formName;
        }

    }

    public function getNameMainFeatures($type = 0){
        if(!$this->main_features){
            if(!$type){
                return 'Выберите особенность';
            }else{
                return 'Нет';
            }

        }

        $mainFeatures = self::find()
            ->select(['name'])
            ->where(['id'=>$this->main_features])
            ->one();

        if($mainFeatures){
            return $mainFeatures['name'];
        }

        if(!$type){
            return 'Выберите особенность';
        }else{
            return 'Нет';
        }


    }

    public function getButtons(){

        $beginHtml = "<div class='data-grid-container-btn'>";
        $bodyHtml = "";
        $endHtml = "</div>";

        $bodyHtml.="<a title='Удалить' href='/admin/features/delete?id={$this->id}' class='btn-moderation --delete'></a>";

        return $beginHtml.$bodyHtml.$endHtml;
    }


}
